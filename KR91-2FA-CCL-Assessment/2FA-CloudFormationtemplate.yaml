AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for 2FA Token Solution on AWS 

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC for ECS services
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select the subnets for ECS tasks
  SecretKey:
    Type: String
    NoEcho: true
    Description: Secret key for JWT token generation

Resources:
  # IAM Roles
  ECSFargateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSFargateTaskPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - sns:Publish
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # DynamoDB Table
  TokenTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tokens
      AttributeDefinitions:
        - AttributeName: token
          AttributeType: S
      KeySchema:
        - AttributeName: token
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # SNS Topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 2FA Token Notifications

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 2FATokenCluster

  # ECS Task Definitions
  TokenGenerationTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: TokenGenerationService
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSFargateExecutionRole.Arn
      ContainerDefinitions:
        - Name: TokenGenerationService
          Image: your-docker-image-url/token-generation-service:latest
          PortMappings:
            - ContainerPort: 5000
          Environment:
            - Name: SECRET_KEY
              Value: !Ref SecretKey
            - Name: DYNAMODB_TABLE
              Value: Tokens
            - Name: SNS_TOPIC
              Value: !Ref SNSTopic

  TokenValidationTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: TokenValidationService
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSFargateExecutionRole.Arn
      ContainerDefinitions:
        - Name: TokenValidationService
          Image: your-docker-image-url/token-validation-service:latest
          PortMappings:
            - ContainerPort: 5001
          Environment:
            - Name: SECRET_KEY
              Value: !Ref SecretKey
            - Name: DYNAMODB_TABLE
              Value: Tokens

  # ECS Services
  TokenGenerationService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref TokenGenerationTask
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets
          AssignPublicIp: ENABLED

  TokenValidationService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref TokenValidationTask
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets
          AssignPublicIp: ENABLED

  # API Gateway
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 2FA-API

  GenerateTokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: generate-token

  ValidateTokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: validate-token

  GenerateTokenMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref GenerateTokenResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: HTTP
        Uri: !Sub "http://${TokenGenerationService.Arn}:5000/generate-token"
        IntegrationHttpMethod: POST

  ValidateTokenMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref ValidateTokenResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: HTTP
        Uri: !Sub "http://${TokenValidationService.Arn}:5001/validate-token"
        IntegrationHttpMethod: POST

Outputs:
  APIGatewayURL:
    Description: URL for the 2FA API
    Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
